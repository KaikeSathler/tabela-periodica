import Head from "next/head";
import path from "path";
import { promises as fs } from "fs";
import { useState } from "react";

export async function getServerSideProps() {
  const jsonDirectory = path.join(process.cwd(), "json");
  const fileContents = await fs.readFile(
    jsonDirectory + "/elementos.json",
    "utf8"
  );
  const data = JSON.parse(fileContents);
  return { props: { data } };
}

export default function Home({ data }) {
  const [modalAtivo, setModalAtivo] = useState(false);
  const [modalID, setmodalID] = useState(null);
  function fecharModal() {
    setModalAtivo(false);
  }
  function mostrarElemento(elementId) {
    setmodalID(elementId);
    setModalAtivo(true);
  }
  function pegarCor(elementId) {
    const categoria = data.elements[elementId].category;
    if (categoria.includes("nonmetal")) {
      return "ametais";
    } else if (categoria.includes("transition metal")) {
      return "metais-transiçao";
    } else if (categoria.includes("other-metals")) {
      return "outros-metais";
    } else if (categoria.includes("metalloid")) {
      return "semimetais";
    } else if (categoria.includes("noble gas")) {
      return "gases-nobres";
    } else if (categoria.includes("halogen")) {
      return "halogenios";
    } else if (categoria.includes("alkali metal")) {
      return "metais-alcalinos";
    } else if (categoria.includes("lanthanide")) {
      return "lantanideos";
    } else if (categoria.includes("actinide")) {
      return "actinidios";
    }
  }
  return (
    <>
      <Head>
        <title>Tabela Periódica dos Elementos - IFPR</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>TABELA PERIÓDICA - ELEMENTOS</h1>
        <div className="table_container">
          <div className="grid">
            {data.elements.map((item, index) => (
              <div
                className={`grid-item x-grid-${item.xpos} y-grid-${
                  item.ypos
                } ${pegarCor(index)}`}
                onClick={() => mostrarElemento(index)}
              >
                <div className="elemento-periodo">
                  <span className="numero_elemento">{item.number}</span>
                  <span className="nome_elemento">
                    <b>{item.symbol}</b>
                  </span>
                  <span className="m_atomica">
                    {item.atomic_mass.toFixed(3)}
                  </span>
                </div>
              </div>
            ))}
            <div
              className={`grid-item x-grid-3 y-grid-6
              } lantanideos`} style={{userSelect: "none"}}
            >
              <div className="elemento-periodo">
                <span className="numero_elemento">&nbsp;</span>
                <span className="nome_elemento">
                  <b>56-71</b>
                </span>
                <span className="m_atomica">&nbsp;</span>
              </div>
            </div>
            <div
              className={`grid-item x-grid-3 y-grid-7
              } actinidios`} style={{userSelect: "none"}}
            >
              <div className="elemento-periodo">
                <span className="numero_elemento">&nbsp;</span>
                <span className="nome_elemento">
                  <b>89-103</b>
                </span>
                <span className="m_atomica">&nbsp;</span>
              </div>
            </div>
          </div>
        </div>
        {modalAtivo && (
          <div id="modal">
            <div id="modal_container">
              <div id="modal_navbar" className={pegarCor(modalID)}>
                <h3 id="modal_title">Elemento químico {data.elements[modalID].name}</h3>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  width="24px"
                  onClick={fecharModal}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </div>
              <div id="modal_content">
                <section>
                  <aside>
                    {/* Imagem do elemento */}
                    <img src={data.elements[modalID].image.url} width="128px" />
                    <p
                      style={{
                        textAlign: "justify",
                        fontSize: "1em",
                        width: "100%",
                        lineHeight: "1.3",
                        color: "#111827",
                      }}
                    >
                      <span style={{ fontWeight: "bolder" }}>Descrição: </span>{" "}
                      {data.elements[modalID].summary}
                    </p>
                  </aside>
                  <aside id="detalhesContainer">
                    <div class="detalhes_elemento">
                      <div>
                        <span>Nome do elemento: </span>
                      </div>
                      <div>
                        <span>{data.elements[modalID].name}</span>
                      </div>
                    </div>
                    <div class="detalhes_elemento">
                      <div>
                        <span>Massa atômica: </span>
                      </div>
                      <div>
                        <span>{data.elements[modalID].atomic_mass}</span>
                      </div>
                    </div>
                    <div class="detalhes_elemento">
                      <div>
                        <span>Configuração atômica: </span>
                      </div>
                      <div>
                        <span>
                          {data.elements[modalID].electron_configuration}
                        </span>
                      </div>
                    </div>
                    <div class="detalhes_elemento">
                      <div>
                        <span>Descoberto por: </span>
                      </div>
                      <div>
                        <span>{data.elements[modalID].discovered_by}</span>
                      </div>
                    </div>
                    {data.elements[modalID].named_by != null && (
                      <div class="detalhes_elemento">
                        <div>
                          <span>Nomeado por: </span>
                        </div>
                        <div>
                          <span>{data.elements[modalID].named_by}</span>
                        </div>
                      </div>
                    )}
                    <div class="detalhes_elemento">
                      <div>
                        <span>Período: </span>
                      </div>
                      <div>
                        <span>{data.elements[modalID].period}</span>
                      </div>
                    </div>
                    <div class="detalhes_elemento">
                      <div>
                        <span>Grupo: </span>
                      </div>
                      <div>
                        <span>{data.elements[modalID].group}</span>
                      </div>
                    </div>
                    <br />
                  </aside>
                </section>
              </div>
            </div>
          </div>
        )}
      </main>
      <footer>
        <a>Developed by Kaike_Sathler ChristopherGouveia</a>
      </footer>
    </>
  );
}
